<?php
/**
 * @Author
 * Navaismo
 */

/**
 * @file
 * Functions for the interface to the help page
 */

/**
  * Class for help
  */
class localwebphone {

  /*
   * rank (for prioritizing modules)
   */
  function rank() {

    $rank = 10;
    return $rank;
  }

  /*
   * init
   */
  function init() {
  }

  /*
   * Adds menu item to nav menu
   *
   * @param $args
   *   Common arguments
   */
  function navMenu($args) {
    return "<small><small><a href='" . $_SESSION['ARI_ROOT'] . "?m=localwebphone&f=display'>" . _("My WebPhone") . "</a></small></small>";

  }


   /* Displays stats page
   *
   * @param $args
   *   Common arguments
   */
  function display($args) {



//retreive values
global $db;
$extension = $_SESSION['ari_user']['extension'];


$sql="select data from sip where id='$extension' and keyword='secret'";
$results = $db->getAll($sql,DB_FETCHMODE_ASSOC);
foreach($results as $row){
               	$password=$row['data'];
}

$sql2="select data from sipsettings where keyword = 'realm'";
$results = $db->getAll($sql2,DB_FETCHMODE_ASSOC);
foreach($results as $row){
               	$realm=$row['data'];
}

if (!$realm){
	$realm='asterisk';
}

$name = $_SESSION['ari_user']['displayname'];
$myip = $_SERVER['SERVER_ADDR'];
$sipuri= "sip:".$extension."@".$myip;
$cid = $name;
$websocket="ws://".$myip.":10060";




$temp=
	 "
	 <input type='hidden' id='jrealm' value='$realm' > 
	 <input type='hidden' id='jusn' value='$extension' >
	 <input type='hidden' id='jsipuri' value='$sipuri' >
	 <input type='hidden' id='jcid' value='$cid' >
	 <input type='hidden' id='jpassword' value='$password' >
	 <!--<input type='hidden' id='jwebsocket' value='$websocket' >-->
	 <input type='hidden' id='jwebsocket' value='ws://$_SERVER[REMOTE_ADDR]:8088/ws' >
	 <input type='hidden' id='jip' value='$myip' >";


$temp2=
	"<link href='modules/websoftphone/websoftphone.css' rel='stylesheet' type='text/css'>
	<link href='modules/websoftphone/textarea.css' rel='stylesheet' type='text/css'>
	<!-- calling the awesome api   -->
	<!--<link type='text/css' href='modules/websoftphone/jquery-ui-1.8.23.custom.css' rel='stylesheet' />-->
        <!--<script type='text/javascript' src='modules/websoftphone/jquery-1.8.0.min.js''></script>-->
        <!--<script type='text/javascript' src='modules/websoftphone/jquery-ui-1.8.23.custom.min.js'></script>-->
	<script src='modules/websoftphone/SIPml-api.js' type='text/javascript'> </script>
	<script src='modules/websoftphone/js.js' type='text/javascript'> </script>
	<script type='text/javascript'>";

/****************************************/
/*	TODO:				*/
/*					*/
/*	Check websockets.		*/
/*	Validate Browser compatibilty.	*/
/*	Install webrtc4all Windows.	*/
/*----XAccept calls after send a call.	*/
/*----XOpen Local audio Incoming call.	*/
/*	Video usage.			*/
/*					*/
/*	by navaismo at gmail dot com	*/
/*	last rev: 29/03/2013		*/
/*					*/
/*	last rev: 32/03/2013		*/
/****************************************/	
/****************************************/
/*	Changelog: 32/03/2013		*/
/****************************************/
/*					*/	
/*	Listeners functions changed	*/
/*	 from IF/ELSEIF to SWITCH.	*/
/*					*/
/*	Added media video for future	*/
/*	usage.				*/
/*					*/
/*	On Hangup destroy call session.	*/
/*					*/	
/*	Solved Accepting calls and	*/
/*	audio issues.			*/
/*					*/
/*	Solved acceptting calls after	*/
/*	previous call.			*/
/*					*/
/****************************************/
/****************************************/
/*	Changelog: 01/04/2013		*/
/****************************************/
/*					*/
/*	Keypad works now if not on 	*/
/*	call.				*/
/*					*/
/*	Hangup clear keypad if not 	*/
/*	in call.			*/
/*					*/
/*	If Response NOTFOUND stop	*/
/*	all sounds.			*/
/*					*/
/*	Fixed DTMF sound on keypress.	*/
/*					*/
/****************************************/

$temp3 .=
	//Variables
	"var mySipStack;
        var mycallSession;
	var mychatSession;
	var myregisterSession;




	// readycallback for INIT
	var readyCallback = function(e){
		console.log('engine is ready');
		
		//CHeck if the SIPml start
		if(SIPml.isInitialized() == 1){
			console.log('Done to initialize the engine');
			//If the stack is started, create the sip stack
			startSipStack();
		}else{
			//If not started display console msg
			console.log('Failed to initialize the engine');

		}        		
	}

	// error callback for INIT
	var errorCallback = function(e){
		console.error('Failed to initialize the engine: ' + e.message);
	}

	//INIT SIPML5 API
	SIPml.init(readyCallback, errorCallback);

	//Here we listen stack messages
	function listenerFunc(e){
		//Log incoming messages
		tsk_utils_log_info('==stack event = ' + e.type);
		
		switch(e.type){
		
			//If failed msg or error Log in console & Web Page
			case 'failed_to_start': case 'failed_to_stop':  case 'stopping': case 'stopped': {

				console.log('Failed to connect to SIP SERVER')
				mycallSession = null;
				mySipStack = null;
				myregisterSession = null;
	
				$('#mysipstatus').html('');
				$('#mysipstatus').html('<i>Disconnected: </i>'+e.description);
				
				break;
			}

			//If the msg is 'started' now try to Login to Sip server       				
	        	case 'started': {
	        	        console.log('Trying to Login');
        	        
				login();//function to login in sip server
	
				//Display msg in the web page
				$('#mysipstatus').html('');
				$('#mysipstatus').html('<i>Trying to Connect</i>');
			
				break;
			}

			//If the msg 'connected' display the register OK in the web page 
			case 'connected':{
				$('#mysipstatus').html('');
				$('#mysipstatus').html('<i>Registered with Sip Server</i>');

				/*$.ajax({
                                        type: 'GET',
                                        url: 'modules/websoftphone/getpeers.php?id=1',
                                        success: function(data){
                                                $('#peers').html(data);
                                        }
                                });*/



				break;
			}

			//If the msg 'Sent request' display that in the web page---Pattience
			case 'sent_request':{

				$('#mysipstatus').html('');
				$('#mysipstatus').html('<i>'+e.description+'</i>');

				break;
			}

			//If the msg 'terminated' display that on the web---error maybe?
			case 'terminated': {
				$('#mysipstatus').html('');
				$('#mysipstatus').html('<i>'+e.description+'</i>');
				
				break;
			}

			//If the msg 'i_new_call' the browser has an incoming call
			case 'i_new_call': {
				 if (mycallSession) {
		                        // do not accept the incoming call if we're already 'in call'
                		        e.newSession.hangup(); // comment this line for multi-line support
		                }else{
               	                
					mycallSession = e.newSession;
				
					//Change buttons values
	        		        btnCall.value = 'Answer';
        	      			btnHangUp.value = 'Reject';
		                        btnCall.disabled = false;
        		               	btnHangUp.disabled = false;
	
					//Start ringing in the browser
                	       		startRingTone();
				
					//Display in the web page who is calling
			                var sRemoteNumber = (mycallSession.getRemoteFriendlyName() || 'unknown');
        			        $('#mycallstatus').html('<i>Incoming call from [<b>' + sRemoteNumber + '</b>]</i>');
                			showNotifICall(sRemoteNumber);
				}
				break;
			}
			case 'i_new_message': {

                                        console.info('++++++++ Receiving SIP SMS +++++++++++++');
                                        mychatSession = e.newSession;
                                        mychatSession.accept();

                                       	console.info('IMmsg = '+e.getContentString()+' IMtype = '+e.getContentType());

					$('#chatarea').html($('#chatarea').html()+'<b>'+e.getContentString()+'</b>');
                                	$('#chatarea').scrollTop($('#chatarea')[0].scrollHeight);

                                        newmessageTone();
                                        //destroy the call session
                                       	mychatSession.hangup
                                        mychatSession = null;

                              break;
                        }


			case 'm_permission_requested':{
                        	break;
                	}
            		case 'm_permission_accepted':
		        case 'm_permission_refused': {
				if(e.type == 'm_permission_refused'){

				        btnCall.value = 'Call';
				        btnHangUp.value = 'HangUp';
				        btnCall.disabled = false;
				        btnHangUp.disabled = true;

				        mycallSession = null;

				        stopRingbackTone();
				        stopRingTone();

				         $('#mysipstatus').html('<i>' + s_description + '</i>');

                    		}
                    		break;
                	}
			case 'starting': default: break;
        	}           	
	}

	//Function to Listen the call session events
	function calllistener(e){
		//Log all events
		tsk_utils_log_info('****call event**** = ' + e.type);

		switch(e.type){

			//Display in the web page that the call is connecting
			case 'connected': case 'connecting': {

			     var bConnected = (e.type == 'connected');
                    		if (e.session == myregisterSession) {		                        
                         		$('#mycallstatus').html('<i>' + e.description + '</i>');
				
                    		}else if (e.type == 'connecting') {		                        
                         		$('#mycallstatus').html('<i>' + e.description + '</i>');
		                
				}else if (e.session == mycallSession) {
		                        btnHangUp.value = 'HangUp';

	      		                if (bConnected) {
        		 	               stopRingbackTone();
                        			stopRingTone();
					}
                            	}

                         	/*	$('#mycallstatus').html('<i>' + e.description + '</i>');
        		 	               stopRingbackTone();
                        			stopRingTone();

				*/
				break;
                        }
		
			//Display in the browser teh call is finished
			case 'terminated': case 'terminating': {
		
				if (e.session == mycallSession) {
		                        mycallSession = null;
              			        myregisterSession = null;

                        		$('#mycallstatus').html('<i>' + e.description + '</i>');
				        stopRingbackTone();
				        stopRingTone();


		               }else if (e.session == mycallSession) {

				        btnCall.value = 'Call';
				        btnHangUp.value = 'HangUp';
				        btnCall.disabled = false;
				        btnHangUp.disabled = true;

				        mycallSession = null;

				        stopRingbackTone();
				        stopRingTone();
                	       }
				break;
                
			}		

			// future use with video
		         case 'm_stream_video_local_added': {
		                    if (e.session == mycallSession) {

                    		    }
                    		break;
                	}
	
			//future use with video
	               case 'm_stream_video_local_removed': {
		                    if (e.session == mycallSession) {

                    		    }
                    		break;
                	}
			
			//future use with video
		       case 'm_stream_video_remote_added':  {
		                    if (e.session == mycallSession) {

                    		    }
	                        break;
            		}
		
			//future use with video
		        case 'm_stream_video_remote_removed': {
		                    if (e.session == mycallSession) {

                    		    }
                    		break;
                	}
	
			//added media audio todo messaging
	                case 'm_stream_audio_local_added':
			case 'm_stream_audio_local_removed':
		        case 'm_stream_audio_remote_added':
		        case 'm_stream_audio_remote_removed': {
        	
		               	stopRingTone();                   
	                        stopRingbackTone();
	
                    		break;
                	}

			//If the remote end send us a request with SIPresponse 18X start to ringing
			case 'i_ao_request':{
	                        var iSipResponseCode = e.getSipResponseCode();
        	               	if (iSipResponseCode == 180 || iSipResponseCode == 183) {
                			startRingbackTone(); //function to start the ring tone
					$('#mycallstatus').html('');
                            		$('#mycallstatus').html('<i>Remote ringing...</i>');
	                       	}
				break;
			}
           
			// If the remote send early media stop the sounds
			case 'm_early_media': {
	                	if (e.session == mycallSession){ 
				      	stopRingTone();                   
        		                stopRingbackTone();
					$('#mycallstatus').html('');
					$('#mycallstatus').html('<i>Call Answered</i>');
				}
				break;
			}
                }

	}

	//function to send the SIP Register
	function login(){
		//Show in the console that the browser is trying to register
		console.log('Registering');
		
		//create the session
        	myregisterSession = mySipStack.newSession('register', {
                	events_listener: { events: '*', listener: listenerFunc } // optional: '*' means all events
                });

		//send the register
	       myregisterSession.register();
	}

	// function to create the sip stack
	function startSipStack(){
		//show in the console that th browser is trying to create the sip stack
		console.info('attempting to start the SIP STACK');

		//retreive data from hidden items
		var jrealm = $('#jrealm').val();
		var jusn = $('#jusn').val();
		var jsipuri = $('#jsipuri').val();
		var jpassword = $('#jpassword').val();
		var jcid = $('#jcid').val();
		var jwebsocket = $('#jwebsocket').val();
		var jbreaker = $('#jbreaker').val();
		//console.info('****************ws:'+jwebsocket+'**re'+jrealm+'**uri'+jsipuri+'**cid'+jcid+'**br'+jbreaker+'**usn'+jusn+'**pwd'+jpassword );
	
		//stack options
		mySipStack  = new SIPml.Stack({
		        realm: ''+jrealm+'',
		        impi: ''+jusn+'',
		        impu: ''+jsipuri+'',
		        password: ''+jpassword+'', // optional
		        display_name: ''+jcid+'', // optional
		        websocket_proxy_url: ''+jwebsocket+'', // optional
		        outbound_proxy_url: 'udp://'+jip+':5060', // optional
		        //ice_servers: [{ url: 'stun:stun.l.google.com:19322'}, { url:'turn:user@numb.viagenie.ca', credential:'myPassword'}], // optional
		        ice_servers: [{url: 'stun:null'}], // optional
		        //enable_rtcweb_breaker: ''+jbreaker+'', // optional
		        enable_click2call: false, // optional
		        events_listener: { events: '*', listener: listenerFunc }, //optional
		        sip_headers: [ //optional
		            {name: 'User-Agent', value: 'DM_SIPWEB-UA'}, 
		            {name: 'Organization', value: 'Digital-Merge'}
		        ]
    		});
		//If the stack failed show errors in console
		if (mySipStack.start() != 0) {
                	console.info('Failed to start Sip Stack');
            	}else{
                	console.info('Started the Sip Stack');
		}
	
	}


	//Fucntion to call/answer
	function call(){
		//some variables
		var tocall = $('#callnumber').val();
		var flag = $('#btnCall').val();
		var calltype;

		if($('#onvideo').is(':checked')){
                	$('#lvideo').text('Disable Video');
			calltype = 'call-audiovideo';
		}else{
                	$('#lvideo').text('Enable Video');
			calltype = 'call-audio';
		}

		
		//If The button to call is CAll and the input text doesn't have a number && the stack failed && there is no Sip session alert and dont call
		if(tocall == ''  && flag == 'Call' &&  mySipStack){
			alert('Please enter the Number or Uri to Call');
		
		//If the button call is CALL and the input text has a number to call, then send the call
		}else if(tocall != '' && flag == 'Call' && !mySipStack){
			alert('The Stack is not ready');	
			
		//If the button call is CALL and the input text has a number to call, then send the call
		}else if(tocall != '' && flag == 'Call' && mySipStack){
		
			//create the session to call
        		mycallSession = mySipStack.newSession(calltype, {
                		audio_remote: document.getElementById('audio_remote'),
                		audio_local: document.getElementById('audio_local'),
                		video_remote: document.getElementById('video_remote'),
                		video_local: document.getElementById('video_local'),
	                    	events_listener: { events: '*', listener: calllistener } // optional: '*' means all events
        	        });
	
			//call using the number in the textbox
        		mycallSession.call($('#callnumber').val());

		//If the textbox is empty and the button call is ANSWER, then is a incoming call
		}else if(flag =='Answer' && mySipStack && mycallSession){

                        stopRingbackTone();
                       	stopRingTone();                   

			//Accept the session call
			mycallSession.accept({
                                audio_remote: document.getElementById('audio_remote'),
                                audio_local: document.getElementById('audio_local'),
                                events_listener: { events: '*', listener: calllistener } // optional: '*' means all events
                        });
		}
	}


	//function to hangup the call
	function hangup(){
		//If exist a call session, hangup and reset button values
		if(mycallSession){
	        	mycallSession.hangup({events_listener: { events: '*', listener: calllistener }});
                        stopRingbackTone();
                       	stopRingTone();                   
                        btnCall.value = 'Call';
       	               	btnHangUp.value = 'HangUp';
			$('#callnumber').attr('value','');
			$('#mycallstatus').html('Call Terminated')

			//destroy the call session
			mycallSession = null;

		}else{
			$('#callnumber').attr('value','');
		}			
		
	}

	//Fucntion to send DTMF frames
	function sipSendDTMF(c){
        	if(mycallSession && c){
            		if(mycallSession.dtmf(c) == 0){
               			try { dtmfTone.play(); } catch(e){ }
            		}
        	}else{
			var lastn = $('#callnumber').val();

			$('#callnumber').val( lastn + c );
       			try { dtmfTone.play(); } catch(e){ }

		}
		
			
    	}



	//function to send messages
                var messageSession;
                var IMListener = function(e){
                        console.info('session event='+e.type);
                }


        function sendIM(){
                var IMtext = $('#sendchat').val();

                if( IMtext == ''  && mySipStack ){
                        console.log('Empty string on IM');
                        alert('Cant send empty Message');

                }else if( IMtext != '' && mySipStack ){
                        console.log('We can send IM+++++++');
                                messageSession = mySipStack.newSession( 'message',{
                                        events_listener: { events: '*', listener: IMListener}
                                });
                                var dtime = new Date();
                                var outtime = dtime.getHours()+':'+dtime.getMinutes+':'+dtime.getSeconds;
                                console.log('trying to send IM++++');
                                messageSession.send($('#chatpeers').val(),$('#sendchat').val(),'text/plain;charset=utf-8');
				$('#chatarea').html($('#chatarea').html()+'<p>>'+$('#sendchat').val()+'</p>');
                                $('#chatarea').scrollTop($('#chatarea')[0].scrollHeight);
                                $('#sendchat').val('');


                }else if( IMtext != '' && !mySipStack ){
                        console.log('We cannot send IM+++++++');
                        alert('stack not ready');
                 }

        }



/**************** fucntion to play sounds *******************/
    function startRingTone() {
        try { ringtone.play(); }
        catch (e) { }
    }

    function stopRingTone() {
        try { ringtone.pause(); }
        catch (e) { }
    }

    function startRingbackTone() {
        try { ringbacktone.play(); }
        catch (e) { }
    }

    function stopRingbackTone() {
        try { ringbacktone.pause(); }
        catch (e) { }
    }

 function newmessageTone() {
        try { newmsg.play(); }
        catch (e) { }
    }


   function showNotifICall(s_number) {
        // permission already asked when we registered
        if (window.webkitNotifications && window.webkitNotifications.checkPermission() == 0) {
            if (oNotifICall) {
                oNotifICall.cancel();
            }
            oNotifICall = window.webkitNotifications.createNotification('images/sipml-34x39.png', 'Incaming call', 'Incoming call from ' + s_number);
            oNotifICall.onclose = function () { oNotifICall = null; };
            oNotifICall.show();
        }
    }


 function handleKeyPress(e){
        var key=e.keyCode || e.which;
        if (key==13){
        sendIM();
        }
  }



	$('#chatpeers').live('change',function(){
		//$('#recchat').text('');
		$('#chatarea').html('');
		$('#sendchat').focus();
	});


</script>";

/****************** another ugly solution to write into the DB the DATA **********************/
global $db;

//catch values
if(isset($_POST['button'])){
	$breaker=$_POST['breaker'];
	$password=$_POST['password'];
	$realm=$_POST['realm'];
	$sipuri=$_POST['sipuri'];
	$username=$_POST['username'];
	$websocket=$_POST['websocket'];
	$cid=$_POST['cid'];

//if one value is empty display the required label

if($breaker==''){
	$errors1 = "<span class='ui-state-highlight'>Required</span>";
}elseif( $password==''){
	$errors1 = "<span class='ui-state-highlight'>Required</span>";
}elseif( $realm==''){
	$errors1 = "<span class='ui-state-highlight'>Required</span>";
}elseif( $sipuri==''){
	$errors1 = "<span class='ui-state-highlight'>Required</span>";
}elseif( $username==''){
	$errors1 = "<span class='ui-state-highlight'>Required</span>";
}elseif( $websocket==''){
	$errors1 = "<span class='ui-state-highlight'>Required</span>";
}else{

//delete previous data
$sql1='truncate websoftphone';
$db->query($sql1);

//insert new data
$sql="INSERT INTO websoftphone(cid,breaker,password,realm,sipuri,username,websocket) Values('$cid','$breaker','$password','$realm','$sipuri','$username','$websocket')";
$db->query($sql);

}
}

$temp4.=

"
<h2>Web Phone for $name</h2>
<div id='line'>
        <div class='spacer'></div>
        <div class='spacer'></div>
</div>
<div>
<ul>
<li>This Phone is a temporal replacement for your normal phone.</li>
<li>You can call as usual, it support DTFM on call as well.</li>
<li>Can't Transfer using the phone but using features codes.(yet).</li>
<li>Can't put On Hold a call.(yet).</li>
</ul>
</div>
<br>
<!--/****************************** html/php code *************************************/-->
<!-- some ugly space -->

	<!-- trying to create beatiful boxes  failed! :( -->
	<div id='sysinfo-left' class='infobox ui-widget-content  ui-corner-all' >
		<h3 class='ui-widget-header ui-state-default ui-corner-all'>WebSoftphone</h3>
               	<div align=center id='mysipstatus' style='font-size: 10px'></div>	
                <table style='width: 100%;'>
		 <tr>
			<td>
				<div align='center'>
					<input autofocus type='text' style='width: 80%' value='' id='callnumber' /> 
					<br>
				</div>
				
			</td> 
		</tr>
                <tr>			
                        <td colspan='1' align='center'>
			    <!-- KeyPad Div -->
			    	<table >
			            <tr><td><input type='button' style='width: 32%' class='btn-primary' value='1' onclick='sipSendDTMF(1);'/><input type='button' style='width: 32%' class='btn-primary' value='2' onclick='sipSendDTMF(2);'/><input type='button' style='width: 32%' class='btn-primary' value='3' onclick='sipSendDTMF(3);'/></td></tr>
			            <tr><td><input type='button' style='width: 32%' class='btn-primary' value='4' onclick='sipSendDTMF(4);'/><input type='button' style='width: 32%' class='btn-primary' value='5' onclick='sipSendDTMF(5);'/><input type='button' style='width: 32%' class='btn-primary' value='6' onclick='sipSendDTMF(6);'/></td></tr>
			            <tr><td><input type='button' style='width: 32%' class='btn-primary' value='7' onclick='sipSendDTMF(7);'/><input type='button' style='width: 32%' class='btn-primary' value='8' onclick='sipSendDTMF(8);'/><input type='button' style='width: 32%' class='btn-primary' value='9' onclick='sipSendDTMF(9);'/></td></tr>
			            <tr><td><input type='button' style='width: 32%' class='btn-primary' value='*' onclick=sipSendDTMF('*'); /><input type='button' style='width: 32%' class='btn-primary' value='0' onclick=sipSendDTMF('0'); /><input type='button' style='width: 32%' class='btn-primary' value='#' onclick=sipSendDTMF('#'); /></td></tr>
        			</table>
                            	<input type='button' class='btn-success' style='width:25%' id='btnCall' value='Call' onclick='call();' />&nbsp;
                            	<input type='button' class='btn-danger' style='width:25%'  id='btnHangUp' value='HangUp' onclick='hangup();' />
                        </td>
		<tr></tr>			
                </tr>
			<td>
				<div align=center id='mycallstatus' style='font-size: 10px'></div>
                        </td>

                <tr>
                </tr>
		</table>
	</div>";



$temp5 .= "
	<h3>Chat</h3>
	<hr>
	<div >
        	<div id='peers'>
			<label for='chatpeers'>Select your Contact</label>&nbsp;<select id='chatpeers' class='ui-widget ui-widget-content'>";
				$sql="select id, description from devices";
				$results = $db->getAll($sql,DB_FETCHMODE_ASSOC);
				foreach($results as $row){
			                $deviceid=$row['id'];
			                $devicedes=$row['description'];
					$temp6.= "<option value='$deviceid'>$deviceid - $devicedes</option>";

				}

$temp7 .= "
		</select>
		</div>
       </div><br>

		<div id='chatarea'>
		</div>

		<input type='text' name='sendchat' class='styletext ui-widget ui-widget-content' id='sendchat' onkeypress='handleKeyPress(event)' size='120'/>
		<input type='button' class='btn-success'  id='btnIM' value='Send' onclick='sendIM();' />&nbsp;	

	<span><br><br></span>

    <!-- Audios -->
    <audio id='audio_remote' autoplay='autoplay' />
    <audio id='ringtone' loop src='modules/websoftphone/sounds/ringtone.wav' />
    <audio id='ringbacktone' loop src='modules/websoftphone/sounds/ringbacktone.wav' />
    <audio id='dtmfTone' src='modules/websoftphone/sounds/dtmf.wav' />
    <audio id='newmsg' src='modules/websoftphone/sounds/newmsg.wav' />";


	$ret .= "".$temp."".$temp2."".$temp3."".$temp4."".$temp5."".$temp6."".$temp7;

	return $ret;
}
}
?>


